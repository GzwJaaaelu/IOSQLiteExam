package com.google.jaaaule.gzw.iosqliteexam.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.google.jaaaule.gzw.iosqliteexam.model.Goods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "goods".
*/
public class GoodsDao extends AbstractDao<Goods, Void> {

    public static final String TABLENAME = "goods";

    /**
     * Properties of entity Goods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Introduction = new Property(1, String.class, "introduction", false, "INTRODUCTION");
        public final static Property Price = new Property(2, float.class, "price", false, "PRICE");
        public final static Property AvatarUrl = new Property(3, String.class, "avatarUrl", false, "AVATAR_URL");
        public final static Property RemainingQuantity = new Property(4, int.class, "remainingQuantity", false, "REMAINING_QUANTITY");
        public final static Property AddToCartTime = new Property(5, String.class, "addToCartTime", false, "ADD_TO_CART_TIME");
    }


    public GoodsDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"goods\" (" + //
                "\"ID\" TEXT NOT NULL UNIQUE ," + // 0: id
                "\"INTRODUCTION\" TEXT," + // 1: introduction
                "\"PRICE\" REAL NOT NULL ," + // 2: price
                "\"AVATAR_URL\" TEXT," + // 3: avatarUrl
                "\"REMAINING_QUANTITY\" INTEGER NOT NULL ," + // 4: remainingQuantity
                "\"ADD_TO_CART_TIME\" TEXT);"); // 5: addToCartTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"goods\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Goods entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(2, introduction);
        }
        stmt.bindDouble(3, entity.getPrice());
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(4, avatarUrl);
        }
        stmt.bindLong(5, entity.getRemainingQuantity());
 
        String addToCartTime = entity.getAddToCartTime();
        if (addToCartTime != null) {
            stmt.bindString(6, addToCartTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Goods entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
 
        String introduction = entity.getIntroduction();
        if (introduction != null) {
            stmt.bindString(2, introduction);
        }
        stmt.bindDouble(3, entity.getPrice());
 
        String avatarUrl = entity.getAvatarUrl();
        if (avatarUrl != null) {
            stmt.bindString(4, avatarUrl);
        }
        stmt.bindLong(5, entity.getRemainingQuantity());
 
        String addToCartTime = entity.getAddToCartTime();
        if (addToCartTime != null) {
            stmt.bindString(6, addToCartTime);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Goods readEntity(Cursor cursor, int offset) {
        Goods entity = new Goods( //
            cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // introduction
            cursor.getFloat(offset + 2), // price
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // avatarUrl
            cursor.getInt(offset + 4), // remainingQuantity
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // addToCartTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Goods entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setIntroduction(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrice(cursor.getFloat(offset + 2));
        entity.setAvatarUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemainingQuantity(cursor.getInt(offset + 4));
        entity.setAddToCartTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Goods entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Goods entity) {
        return null;
    }

    @Override
    public boolean hasKey(Goods entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
